#!/bin/bash

# Test whether there's an input directory
if [ "$1" != "" ]
then
    root="./`echo $1 | sed 's/\.\|\///g'`"
    input=1
else
    root="./"
    input=0
fi

# Find the project files
if [ $input == 0 ]
   then
   projFiles=$(find -L $root -maxdepth 2 -type f -name \*.org)
   else
       if [ $input == 1 ]
	  then
	  projFiles=$(find -L $root -maxdepth 1 -type f -name \*.org)
	  else
	      echo "Error: can't determine where to start looking for .org files"
       fi
fi

# Initialize results array
results=()

# For each file, determine the status
for file in $projFiles
do

    # Determine the supported states in the given org file, if any.
    states=`head -n 1 $file \\
            | grep -E "^#\+TODO: " \\
            | sed "s/^#+TODO: //" | sed 's/([^ ]*)//g' | sed 's/| //' \\
            | sed "s/ /|/g"`

    # Determine the status of the project. If there are no TODO states
    # defined in the file, set status to "No Header"
    if [ -z $states ]
    then
	status="No Header"
    else
	# Grep for the state of the Next Steps line and determine
	# the status of the project
	status=$(grep -E "^\*.+Next Steps" $file | grep -Eo "$states")
	if [ -z $status ]
	then
	    status="Undefined"
	else
	    status=$status
	fi
    fi
    
    # Initiate nextStep for this run of the loop.
    nextStep=""
    
    if [[ "$status" == "WAITING" || "$status" == "SCHEDULED" || "$status" == "HANDED-OFF" || "$status" == "POSTPONED" || "$status" == "CANCELLED" || "$status" == "DONE" ]]
    then
	# Determine the line on which Next Steps resides
	nextStepsLine=$(grep -En "^\*.+Next Steps" $file | cut -f 1 -d ":")
	nextStepLine=$(expr $nextStepsLine + 3)
	nextStep=$(sed -n ${nextStepLine}p $file | sed "s/^ *//")
    fi

    if [[ "$status" == "TODO" || "$status" == "Undefined" ]]
    then
	nextStep="Start the project."
    fi

    if [ "$status" == "IN-PROGRESS" ]
    then
	# The Next Step is the first incomplete checklist item after the
	# Next Steps header
	nextStep=`sed -e "1,/^.*Next Steps.*/d" $file | grep -m 1 -E "^\- \[ \] |^\- \[\-\] " \\
		      | sed "s/- \[ \] //" | sed "s/- \[-\] //"`
    fi

    if [ `uname` == "Linux" ]
    then
	# Grab the last modification time of the org file.
	lastMod=$(ls -l --time-style=long-iso $file | cut -f 6,7 -d " ")
    else
	if [ `uname` == "Darwin" ]
	then
	    # Grab the last modification time of the org file.
	    # This is the macOS-specific invocation.
	    rawLastMod=`stat -x $file | grep Modify | sed 's/^Modify: //' | cut -f 2-5 -d " "`
	    lastMod=`date -jf "%b %e %H:%M:%S %Y" "$rawLastMod"  +"%Y-%m-%d %H:%M"`
	else
	    lastMod='Unsupported platform'
	fi
    fi
    
    
    # Shorten project name
    project=$(echo $file | sed "s/^.\/*//g" | sed "s/\/.*$//g")

    # Results Delimeter
    # Could replace this with '\x00'
    delim=$(printf '\xe2\x98\x95')
    
    # Add to the results array
    results+=$project$delim$status$delim$lastMod$delim$nextStep"\n"
    
done

# Pretty print the output with a header
(printf "PROJECT${delim}STATUS${delim}LAST MODIFIED${delim}NEXT STEP\n"; printf "${results[*]}") | column -s "${delim}" -t
