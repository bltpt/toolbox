#!/usr/bin/env python3

# exploderange: IP address range [maybe list of IP address ranges] --> StdOut
# Given an input argument of space-delimited start-end IP address
# pairs, list all of the addresses in the range starting with IP1 and
# ending with IP2.

import os
import sys
import netaddr # figure out how to import all exceptions

def processRange(addrs,cls):
    '''processRange: CIDR|Range ClassOfAddress --> StdOut
    Purpose: given the start of an IP address range IP1 and end of
    range IP2, print to StdOut all of the IP addresses in that range.
    '''
    for addr in cls(*addrs):
        print(str(addr))

def processOrError(argument):
    '''processOrError: String --> StdOut
    Purpose: call processRange elegantly (ish)
    '''
    if '-' in argument:
        ips = argument.rstrip().split('-')
        cls = netaddr.IPRange
    elif '/' in argument:
        ips = (argument,)
        cls = netaddr.IPNetwork
    # Add a check to make sure ips is exactly two strings long
    try:
        processRange(ips,cls)
    except Exception as e :
        print("%s: %s" % (e, argument))
        
## Call the program

if __name__ == '__main__':
    if not os.isatty(0):
        inputLines = sys.stdin.readlines()
    else:
        inputLines = sys.argv[1:]
    for line in inputLines: # turn this into an invocation of processOrError()
        processOrError(line)
