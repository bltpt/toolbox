#!/bin/bash

# projdone: Path --> <move the Path>
# Purpose: mark a project at PATH "DONE" and move it to the completed
#          projects directory


## Variables used here
######################

## $path: the resolved absolute path of the input to projdone 

## $dirPath: the resolved absolute path of the project directory for
##           the project being marked done.

## $orgFile: the resolved absolute path of the org file within the
##           project directory at $dirPath



# Test whether input is an org file, project directory
# or something else.
if [ "$1" != "" ]
then
    if paths=(`isProjDir $1`)
    then
	orgFile=${paths[0]}
	projDir=${paths[1]}
    elif paths=(`isProjFile $1`)
    then
	orgFile=${paths[0]}
	projDir=${paths[1]}
    else
	printf "Error:\n\n    Specified input isn't a project directory or org file.\n"
	exit 1
    fi
else
    printf "Error:\n\n     No input specified.\n"
    exit 1
fi

# Determine the completed projects directory
completedProjects="$COMPLETEDPROJECTS"

# Read in the possible states
header=`head -n 1 $orgFile`
states=`projstates "${header}"`

# Find the next steps line in the project org file
nextStepsLine=$(grep -En "^\* .+Next Steps" $orgFile | tail -n 1 |  cut -f 1 -d ":")

# Capture the current state
state=$(grep "Next Steps" $orgFile | tail -n 1 | egrep -o "${states}")

# Change the current state line in the project org file to DONE
perl -pi -e 's/^\*.* Next Steps/\* DONE Next Steps/ if $. == '"${nextStepsLine}"';' $orgFile

# Annotate with projdone having changed the state.
date=`date "+%Y-%m-%d %a %H:%M"`
logbookLine=$(expr $nextStepsLine + 2)
annotationLine=$(expr $logbookLine + 1)
perl -pi -e 'print "- State \"DONE\" from \"'"${state}"'\"    ['"${date}"'] \\\\\n" if $. == '"${logbookLine}"';' $orgFile
perl -pi -e 'print "  Closed via projdone.\n" if $. == '"${annotationLine}"';' $orgFile

# Move the project directory to the completed projects directory
mv "$projDir" "$completedProjects/"
