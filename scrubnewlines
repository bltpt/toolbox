#!/usr/bin/env python3

'''scrubnewlines: CSVFile -> StdOut
   Purpose: to read the CSVFile, replace all of the newlines that
           are inside field values with a space (like a sane
           person) and print the resulting, useable csv file to
           StdOut.
'''

import sys
import csv
import io
import argparse

def cleanCSV(stringIO):
    '''cleanCSV(): _io.StringIO --> StdOut
    Purpose: Converts the input into a csv.DictReader object for
             the purpose of capturing the CSV's values as descrete
             objects, allowing us to scan them for newlines to
             replace. Converts it back to a csv and prints to
             StdOut.
    '''
    csvDict = csv.DictReader(stringIO)
    rowList = list(csvDict)

    # get rid of newlines and replace nulls
    for row in rowList:
        for k,v in row.items():
            if v:
                row[k] = v.replace('\n',' ')
            else:
                row[k] = 'NULL'

    # print header row
    header = ''
    for key in rowList[0].keys():
        header = header+key+','
    header = header.strip(',')
    print(header)

    # print rows
    for row in rowList:
        rowPrint = ''
        for value in row.values():
            rowPrint = rowPrint+value+','
        rowPrint = rowPrint.strip(',')
        print(rowPrint)

def cleanTSV(stringIO):
    '''cleanTSV(): _io.StringIO -> StdOut
    Purpose: to scrub a tab-delimited _io.StringIO object of newlines
             in its field values, then print them to StdOut as TSV.
    '''
    delim = "	"
    tsvDict = csv.DictReader(stringIO, delimiter="	")
    rowList = list(tsvDict)

    # get rid of newlines and replace nulls
    for row in rowList:
        for k,v in row.items():
            if v:
                row[k] = v.replace('\n',' ')
            else:
                row[k] = 'NULL'

    # print header row
    header = ''
    for key in rowList[0].keys():
        header = header+key+delim
    header = header.strip(delim)
    print(header)

    # print rows
    for row in rowList:
        rowPrint = ''
        for value in row.values():
            rowPrint = rowPrint+value+delim
        rowPrint = rowPrint.strip(delim)
        print(rowPrint)
    
    
def main(path):
    '''main(): Str -> StdOut
    Purpose: treat Str as a file path, read it, replace the newlines
             inside each cell with a space, and print the new csv
             to StdOut.
    '''
    delim = "	"
    try:
        with open(path,'r', newline='') as f:
            csvFile = f.read()
            stringIO = io.StringIO(csvFile)
            if delim in ("	"):
                cleanTSV(stringIO)
            else:
                cleanCSV(stringIO)
    except Exception as e:
        print(e)

# NEED TO IMPLEMENT THE FOLLOWING:
# - argparse to select supported delimiters
# - generalize cleanCSV and cleanTSV for arbitrary delims
# - don't allow execution with arbitrary delims, because
#   there could be more edge cases.
if __name__ == '__main__':
    try:
        assert sys.version_info >= (3, 6)
    except:
        sys.exit('scrubnewlines requires Python v3.6 or higher, because older versions of the csv module do not implement the DictReader class as OrderedDicts.')
    desc='scrubnewlines will determine the format of the input file automatically (one of csv, tsv, xls, or xlsx), and outputs the scrubbed content of the file in that format to stdout.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("file",
                        help='the file needing newlines scrubbed from its fields')
    parser.add_argument("--output",
                        "-o",
                        help='path to optional output file')
    parser.add_argument("--output-format",
                        choices=['csv', 'tsv', 'xls', 'xlsx'],
                        help='optional format to save as when the --output option is given')
    args = parser.parse_args()
    main(sys.argv[1])
